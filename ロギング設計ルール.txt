/////////////////////////////////////////////////////////////////////////////////////////////
ロギング設計ルール
/////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
日付：2025/04/22
タイトル：ログ出力規則の統一（Logクラス適用規則の策定）
//////////////////////////////////////////////////////////////

[背景]
・Logクラス導入に伴い、ログ出力をSafe,Warn,Errorで分類し、レベルごとの意図を汲みやすくする必要があった
・BGMManagerクラスでのログ設計をベースに方針を定める

[方針]
・ログは目的,ログレベル,出力形式,出力タイミング,の4軸で規則を定義
・ログメッセージは定型フォーマットに沿って表記し、引数値,状態変数の明示する

[ログレベル規則]
●Log.Safe
　・命令実行を開始の記録
　・実行を記録するログと一緒に終了ログをする必要はない
　〇例：
　　・Log.Safe("Play実行:main_theme,vol = 0.5");

●Log.Warn
　・命令が無効,処理を中断した場合
　〇例：
　　・Log.Warn("FadeIn失敗:ステートの不一致,State = CrossFade");
　　・Log.Warn("CrossFade中断:同BGM main_theme が指定されたため中断");

●Log.Error
　・エラーや例外
　・主にロード失敗や致命的なもの
　〇例：
　　・Log.Error("Play失敗:リソース読込に失敗,main_theme");
　　・Log.Error("FadeIn失敗:リソース読込に失敗,intro_theme");

[出力形式規則]
●基本フォーマット：
<命令名><実行|失敗|終了>:<詳細情報>

●詳細情報の記述例(引数,内部状態)：
　・resourceAddress → main_theme
　・volume → vol = 0.5
　・duration → dura = 2.0
　・state → State = Pause
　・複数引数がある場合はカンマ区切り
　　・Log.Safe("FadeIn終了:intro_theme,dura = 3.0,vol = 0.8");

[出力タイミング規則]
●各命令に対して以下を原則とする：
　・実行直後：Log.Safe(命令名 + 実行)
　・拒否,例外時：Log.Warn または Log.Error(命令名 + 失敗理由)
　・非同期関数においては、完了ログも出力する(例：FadeIn終了)
　　・「成功完了」と「中断,例外終了,失敗」を区別するため

●補足的に、フェード処理の中断などの致命的でないキャンセルはSafeでも可：
 　・Log.Safe("ExecuteVolumeTransition中断:OperationCanceledException");

[結果]
・ログ設計の粒度が統一された  
・ログから処理順序や実行内容をトレースしやすくなり、デバッグ効率が向上
・今後SEManagerやSoundSystem全体のログ整備にも展開可能な基盤が整備された
